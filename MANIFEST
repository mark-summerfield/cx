# TODO
# (1) vec tests: copy vec_str_test.[hc] & create a struct Pair to test on
#	alloc free get get_last set insert replace remove pop copy merge
#	equal find sort search
#
# (3) rbt with void* items
#     - if item is struct* then it is an ordered map of key-values
#     rbt_str char* items - ordered set of char* (wrapper like vec_str)
#     rbt_int int items - (modified copy of rbt like vec_int)
#
# (4) hsh with void* items
#     - as with rbt but based on hash table with linear probing
# (5) que (based on vec)?
# (6) lst (doubly-linked list)?
# (7) deq (based on list)?
#
# (8) str (based on vec)?

cx.h
vec_common.h
vec.h
vec.c
vec_str.h
vec_str.c
vec_int.h
vec_int.c

sx.h
sx.c

vaargs.h

cx_test.c
cx_util_test.h
cx_util_test.c
vec_int_test.h
vec_int_test.c
vec_str_test.h
vec_str_test.c
sx_test.h
sx_test.c
va_test.h
va_test.c

SConstruct

doc.adoc
doc.rb
doc.css
doc.sh

st.sh

# vim: syn=yaml
