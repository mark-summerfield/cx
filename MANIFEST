# TODO
#
# TODO implement check_equal_ints(tinfo*,SetInt*,int*) to avoid vec & tostring
# TODO test set_int_remove()
#
# rbt types
#   see ~/app/golib/zOld/rbset/rbset.go
#   see ~/app/golib/set/set.go
#   see ~/app/golib/rbtree/rbtree.go (now with // free(root) marked)
#   - SetInt (much easier to test than SetStr)
#   - SetStr (this and vector are all that's needed for wordladder)
#
# Only do this as needed:
#   - VecRef a Vec that does not own its void* values
#   - VecStrRef a VecStr that does not own its char* values
#   - Hsh  with void* items - as with rbt but based on hash table?
#   - Que  (based on vec)?
#   - Lst  (doubly-linked list)?
#   - Deq  (based on list)?
#   - Str  (based on vec)?
#   - MapStrStr (rbt; see set_str)?
#   - MapStrAny (rbt; see set_str)?
#   - MapIntAny (rbt; see set_str)?
#   etc.

cx.h
set_int.h
set_int.c
vec_common.h
vec.h
vec.c
vec_str.h
vec_str.c
vec_int.h
vec_int.c

set_str.h.idea
set_str.c.idea
rbt.h.idea
rbt.c.idea

sx.h
sx.c

vaargs.h

cx_test.c
cx_util_test.h
cx_util_test.c
set_int_test.h
set_int_test.c
vec_common_test.h
vec_common_test.c
vec_int_test.h
vec_int_test.c
vec_str_test.h
vec_str_test.c
tag_test.h
vec_test.h
vec_test.c
sx_test.h
sx_test.c
va_test.h
va_test.c

SConstruct
st.sh

doc.adoc
doc.rb
doc.css
doc.sh

# vim: syn=yaml
