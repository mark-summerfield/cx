# Do these as needed:
#   - set_int_symmetric_difference set_int_isdisjoint set_int_issubset
#     set_int_issuperset
#   - set_str_symmetric_difference set_str_isdisjoint set_str_issubset
#     set_str_issuperset
#   - Map (based on SetStr; owned char* keys; void* values owned iff
#	   _cpy && _destroy)
# Long shots:
#   - MapStrStr (rbt; see set_str)
#   - MapIntAny (rbt; see set_str)
#   - Hsh  with void* items - as with rbt but based on hash table
#   - Deq  (based on list)
#   - Str  (based on vec)

cx.h
# lst.h # TODO (3) OWNS|BORROWS
# lst.c
# lst_str.h # TODO (2) OWNS|BORROWS
# lst_str.c
lst_int.h # TODO (1)
lst_int.c
set_str.h
set_str.c
set_int.h
set_int.c
vec_common.h
vec.h
vec.c
vec_str.h
vec_str.c
vec_int.h
vec_int.c

str.h
str.c

fx.h
fx.c

tx.h

vaargs.h

cx_test.c
cx_util_test.h
cx_util_test.c
set_str_test.h
set_str_test.c
set_int_test.h
set_int_test.c
vec_common_test.h
vec_common_test.c
vec_int_test.h
vec_int_test.c
vec_str_test.h
vec_str_test.c
tag_test.h
vec_test.h
vec_test.c
str_test.h
str_test.c
va_test.h
va_test.c

SConstruct
st.sh

doc.adoc
doc.rb
doc.css
doc.sh

# vim: syn=yaml
