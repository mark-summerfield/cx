# TODO
# - size_t â†’ ptrdiff_t for loops & array/char* indexes
#
# vec*:
#   - find/search return ptrdiff_t with -1 not found
#   - ptrdiff_t vec*find_last(vec* v, void* what) 
#   - const void** vec*values(const vec* v) // for fast iteration
#
# rbt types
#   see ~/app/golib/rbtree/rbtree.go (now with // free(root) marked)
#   see ~/app/golib/zOld/rbset/rbset.go
#   see rb.c.eg & compare with set_str.c
#   NOTE for deletions I will need to call t->_destroy(node->_value)
#   - set_str (this and vector are all that's needed for wordladder)
#
# Only do this as needed:
#   - hsh with void* items - as with rbt but based on hash table?
#   - que (based on vec)?
#   - lst (doubly-linked list)?
#   - deq (based on list)?
#   - str (based on vec)?
#   - set_int (rbt; see set_str) 
#   - map_str_str (rbt; see set_str)?
#   - map_str_any (rbt; see set_str)?
#   - map_int_any (rbt; see set_str)?
#   etc.

cx.h
set_str.h
set_str.c
vec_common.h
vec.h
vec.c
vec_str.h
vec_str.c
vec_int.h
vec_int.c

rbt.h.idea
rbt.c.idea

sx.h
sx.c

vaargs.h

cx_test.c
cx_util_test.h
cx_util_test.c
vec_common_test.h
vec_common_test.c
vec_int_test.h
vec_int_test.c
vec_str_test.h
vec_str_test.c
tag_test.h
vec_test.h
vec_test.c
sx_test.h
sx_test.c
va_test.h
va_test.c

SConstruct

doc.adoc
doc.rb
doc.css
doc.sh

st.sh

# vim: syn=yaml
