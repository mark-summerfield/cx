# TODO
#
# rbt types
#   see ~/app/golib/set/set.go
#   see ~/app/golib/rbtree/rbtree.go (now with // free(root) marked)
#   - SetInt (much easier to test than SetStr)
#   - SetStr (this and vector are all that's needed for wordladder)
#   - VecStrView an unowned VecStr (then use in SetStr)
#
# Only do these as needed:
#   - Hsh  with void* items - as with rbt but based on hash table?
#   - Que  (based on vec)?
#   - Lst  (doubly-linked list)?
#   - Deq  (based on list)?
#   - Str  (based on vec)?
#   - MapStrStr (rbt; see set_str)?
#   - MapStrAny (rbt; see set_str)?
#   - MapIntAny (rbt; see set_str)?
#   - VecSlice a slice of a Vec that does not own its void* values
#   - VecStrSlice a slice of a VecStr that does not own its char* values
#   etc.

cx.h
set_str.h
set_str.c # TODO use unowned VecStrView where poss.
set_int.h
set_int.c
vec_common.h
vec.h
vec.c
vec_str.h
vec_str.c
# TODO vec_str_view
vec_int.h
vec_int.c

sx.h
sx.c

vaargs.h

cx_test.c
cx_util_test.h
cx_util_test.c
# TODO set_str tests
set_int_test.h
set_int_test.c
vec_common_test.h
vec_common_test.c
vec_int_test.h
vec_int_test.c
# TODO vec_str_view tests
vec_str_test.h
vec_str_test.c
tag_test.h
vec_test.h
vec_test.c
sx_test.h
sx_test.c
va_test.h
va_test.c

SConstruct
st.sh

doc.adoc
doc.rb
doc.css
doc.sh

# vim: syn=yaml
